<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[手码第一篇]]></title>
      <url>http://deriito.github.io/2016/10/02/%E6%89%8B%E7%A0%81%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<h2 id="记录下这两天看书看到的死锁的基本概念"><a href="#记录下这两天看书看到的死锁的基本概念" class="headerlink" title="记录下这两天看书看到的死锁的基本概念"></a>记录下这两天看书看到的死锁的基本概念</h2><h3 id="1-什么是死锁"><a href="#1-什么是死锁" class="headerlink" title="1.什么是死锁"></a>1.什么是死锁</h3><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象。若无外力作用，他们都将无法推进下去。</p>
<h3 id="2-条件"><a href="#2-条件" class="headerlink" title="2.条件"></a>2.条件</h3><h5 id="1）互斥条件："><a href="#1）互斥条件：" class="headerlink" title="1）互斥条件："></a>1）互斥条件：</h5><p>指进程对所分配到的资源进行排他性使用，即在一段时间内某资源只由一个进程占用，如果此时还有其他进程请求资源，则请求者只能等待，直到占有资源的进程用毕释放。</p>
<h5 id="2）请求和保持条件："><a href="#2）请求和保持条件：" class="headerlink" title="2）请求和保持条件："></a>2）请求和保持条件：</h5><p>指进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源已被其他的进程占有，此时请求进程阻塞，但又对自己已获得的其他资源保持不放。</p>
<h5 id="3）不剥夺条件："><a href="#3）不剥夺条件：" class="headerlink" title="3）不剥夺条件："></a>3）不剥夺条件：</h5><p>指进程已获得的资源，在未使用完之前不能被剥夺，只能在使用完时由自己释放。</p>
<h5 id="4）环路等待条件："><a href="#4）环路等待条件：" class="headerlink" title="4）环路等待条件："></a>4）环路等待条件：</h5><p>发生死锁时，必然存在一个进程——资源的环形链。</p>
]]></content>
    </entry>
    
  
  
</search>
